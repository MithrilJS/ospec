#!/usr/bin/env node
"use strict"

const o = require("../ospec")
const path = require("path")
const glob = require("glob")

// eval is needed because`import()` is a syntax error in older node.js versions (pre 13.2).
const supportsImport = (() => { try {
	// eslint-disable-next-line no-eval
	return Boolean(eval("import('./non-existant-file').catch(()=>{})"))
} catch(_) {
	return false
}})()

// eslint-disable-next-line global-require, no-eval, no-unused-vars
const load = supportsImport ? (x) => eval("import(x)") : async (x) => require(x)

function parseArgs(argv) {
	argv = ["--globs"].concat(argv.slice(2))
	const args = {preload: []}
	let name
	argv.forEach((arg) => {
		if ((/^--/).test(arg)) {
			name = arg.substr(2)
			if (name === "require") {
				if (args.require == null) console.warn(
					"Warning: The --require option has been deprecated, use --preload instead"
				)
				args.require = true
				name = "preload"
			}
			args[name] = args[name] || []
		} else {
			args[name].push(arg)
		}
	})
	return args
}


const args = parseArgs(process.argv)
const globList = args.globs && args.globs.length ? args.globs : ["**/tests/**/*.js"]
const ignore = ["**/node_modules/**"].concat(args.ignore || [])
const cwd = process.cwd()

// Ensure a p
Promise.all(args.preload.map(
	(mod) => load(path.join(cwd, mod)).catch((e) => {
		console.error(`could not preload ${mod}`)
		console.error(e)
		// eslint-disable-next-line no-process-exit
		process.exit(1)
	})
)).then(
	() => {
		let remaining = globList.length
		let loading = Promise.resolve()
		globList.forEach((globPattern) => {
			glob(globPattern, {ignore: ignore})
				.on("match", (fileName) => {
					var fullPath = path.join(cwd, fileName)
					loading = loading.then(() => {
						o.metadata({file: fullPath})
						return load(fullPath).catch((e) => {
							console.error(e)
							o.spec(path.join(cwd, fileName), () => {
								o("> > BAILED OUT < < <", function(){throw e})
							})
						})
					})
				})
				.on("error", (e) => { console.error(e) })
				.on("end", () => { if (--remaining === 0) loading.then(() => o.run()) })
		})
	}
)

process.on("unhandledRejection", (e) => { console.error("Uncaught (in promise) " + e.stack) })
